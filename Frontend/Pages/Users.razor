@page "/users"
@using SkillSnap.Shared.Models
@using Frontend.Services
@using Microsoft.AspNetCore.Components.Forms
@inject PortfolioUserService PortfolioUserService
@inject IJSRuntime JSRuntime

<PageTitle>Portfolio Users</PageTitle>

<h2>Portfolio Users</h2>

<!-- Add User Form -->
<div class="add-user-form">
    <h4>Add New Portfolio User</h4>
    <EditForm Model="newUser" OnValidSubmit="AddUser">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <div class="form-row">
            <div class="form-group">
                <label for="name">Name:</label>
                <InputText id="name" @bind-Value="newUser.Name" class="form-control" />
            </div>
            <div class="form-group">
                <label for="bio">Bio:</label>
                <InputTextArea id="bio" @bind-Value="newUser.Bio" class="form-control" rows="3" />
            </div>
            <div class="form-group">
                <label for="profileImage">Profile Image URL:</label>
                <InputText id="profileImage" @bind-Value="newUser.ProfileImageUrl" class="form-control" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span>Adding...</span>
                    }
                    else
                    {
                        <span>Add User</span>
                    }
                </button>
            </div>
        </div>
    </EditForm>
</div>

<!-- Users List -->
@if (users == null)
{
    <p><em>Loading users...</em></p>
}
else if (!users.Any())
{
    <p><em>No portfolio users found.</em></p>
}
else
{
    <div class="users-container">
        @foreach (var user in users)
        {
            <div class="user-row">
                @if (editingUserId == user.Id)
                {
                    <!-- Edit Form -->
                    <div class="user-edit-form">
                        <EditForm Model="editUser" OnValidSubmit="() => SaveUser(user.Id)">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            
                            <div class="edit-form">
                                <div class="form-group">
                                    <label>Name:</label>
                                    <InputText @bind-Value="editUser.Name" class="form-control" />
                                </div>
                                <div class="form-group">
                                    <label>Bio:</label>
                                    <InputTextArea @bind-Value="editUser.Bio" class="form-control" rows="3" />
                                </div>
                                <div class="form-group">
                                    <label>Profile Image URL:</label>
                                    <InputText @bind-Value="editUser.ProfileImageUrl" class="form-control" />
                                </div>
                                
                                <div class="form-buttons">
                                    <button type="submit" class="btn btn-success btn-sm" disabled="@isLoading">Save</button>
                                    <button type="button" class="btn btn-secondary btn-sm" @onclick="CancelEdit">Cancel</button>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                }
                else
                {
                    <!-- Display Mode -->
                    <div class="user-display">
                        <div class="user-profile">
                            <img src="@user.ProfileImageUrl" alt="Profile Picture" class="profile-picture" />
                            <div class="user-info">
                                <h4>@user.Name</h4>
                                <p>@user.Bio</p>
                                
                                <!-- Skills Display -->
                                @if (user.Skills != null && user.Skills.Any())
                                {
                                    <div class="user-skills">
                                        <strong>Skills:</strong>
                                        <div class="skills-tags">
                                            @foreach (var skill in user.Skills)
                                            {
                                                <span class="skill-tag">@skill.Name (@skill.Level)</span>
                                            }
                                        </div>
                                    </div>
                                }
                                
                                <!-- Projects Display -->
                                @if (user.Projects != null && user.Projects.Any())
                                {
                                    <div class="user-projects">
                                        <strong>Projects:</strong>
                                        <ul>
                                            @foreach (var project in user.Projects)
                                            {
                                                <li>
                                                    @if (!string.IsNullOrEmpty(project.ProjectUrl))
                                                    {
                                                        <a href="@project.ProjectUrl" target="_blank" class="project-link">@project.Title</a>
                                                    }
                                                    else
                                                    {
                                                        @project.Title
                                                    }
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                }
                            </div>
                        </div>
                        
                        <div class="user-actions">
                            <button class="btn btn-warning btn-sm" @onclick="() => StartEdit(user)">Edit</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteUser(user.Id)">Delete</button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    private List<PortfolioUser>? users;
    private PortfolioUser newUser = new();
    private PortfolioUser editUser = new();
    private int? editingUserId;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            users = await PortfolioUserService.GetAllPortfolioUsersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
            users = new List<PortfolioUser>();
        }
    }

    private async Task AddUser()
    {
        if (string.IsNullOrWhiteSpace(newUser.Name))
            return;

        isLoading = true;
        try
        {
            var createdUser = await PortfolioUserService.CreatePortfolioUserAsync(newUser);
            users?.Add(createdUser);
            newUser = new PortfolioUser();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding user: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void StartEdit(PortfolioUser user)
    {
        editingUserId = user.Id;
        editUser = new PortfolioUser
        {
            Id = user.Id,
            Name = user.Name,
            Bio = user.Bio,
            ProfileImageUrl = user.ProfileImageUrl
        };
    }

    private async Task SaveUser(int id)
    {
        if (string.IsNullOrWhiteSpace(editUser.Name))
            return;

        isLoading = true;
        try
        {
            var success = await PortfolioUserService.UpdatePortfolioUserAsync(id, editUser);
            if (success)
            {
                var userIndex = users?.FindIndex(u => u.Id == id) ?? -1;
                if (userIndex >= 0 && users != null)
                {
                    users[userIndex].Name = editUser.Name;
                    users[userIndex].Bio = editUser.Bio;
                    users[userIndex].ProfileImageUrl = editUser.ProfileImageUrl;
                }
                CancelEdit();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating user: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CancelEdit()
    {
        editingUserId = null;
        editUser = new PortfolioUser();
    }

    private async Task DeleteUser(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user? This will also delete all their skills and projects."))
        {
            try
            {
                var success = await PortfolioUserService.DeletePortfolioUserAsync(id);
                if (success)
                {
                    users?.RemoveAll(u => u.Id == id);
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting user: {ex.Message}");
            }
        }
    }
}