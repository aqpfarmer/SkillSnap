@page "/login"
@using SkillSnap.Shared.Models
@using Frontend.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Login - SkillSnap</PageTitle>

<div class="login-container">
    <div class="login-card">
        <h2>Login to SkillSnap</h2>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="bi bi-exclamation-circle-fill me-2"></i>
                @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty" aria-label="Close"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="bi bi-check-circle-fill me-2"></i>
                @successMessage
                <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty" aria-label="Close"></button>
            </div>
        }
        
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            
            <div class="form-group">
                <label for="email">Email:</label>
                <InputText id="email" @bind-Value="loginModel.Email" class="form-control" placeholder="Enter your email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>
            
            <div class="form-group">
                <label for="password">Password:</label>
                <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" placeholder="Enter your password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            
            <button type="submit" class="btn btn-primary btn-full" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner"></span>
                    <span>Logging in...</span>
                }
                else
                {
                    <span>Login</span>
                }
            </button>
        </EditForm>
        
        <div class="login-footer">
            <p>Don't have an account? <a href="/register">Register here</a></p>
        </div>
    </div>
</div>

@code {
    private LoginDto loginModel = new();
    private string errorMessage = "";
    private string successMessage = "";
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            Navigation.NavigateTo("/");
        }

        // Check for success message from registration
        var query = new Uri(Navigation.Uri).Query;
        if (query.Contains("registered=true"))
        {
            successMessage = "Registration successful! Please log in with your new account.";
        }
    }

    private async Task HandleLogin()
    {
        errorMessage = "";
        successMessage = "";
        isLoading = true;

        try
        {
            var result = await AuthService.LoginAsync(loginModel);
            
            if (result.IsSuccess)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }
}